import Commande from "../models/commande.js";
import { Utilisateur } from "../models/user.js";
import logger from "../utils/logger.js";

// üìå Obtenir toutes les commandes
export const getAllCommandes = async (req, res) => {
  try {
    // 1. Lire les param√®tres de pagination (ou mettre des valeurs par d√©faut)
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 5;
    const skip = (page - 1) * limit;

    // 2. R√©cup√©rer les commandes avec pagination
    const commandes = await Commande.find()
      .populate("magasinier", "nom prenom email")
      .skip(skip)
      .limit(limit);

    // 3. Compter le nombre total de commandes
    const totalCommandes = await Commande.countDocuments();

    // 4. R√©pondre avec les donn√©es pagin√©es + infos
    res.status(200).json({
      results: commandes,
      totalCommandes,
      totalPages: Math.ceil(totalCommandes / limit),
      page,
      limit,
    });
  } catch (error) {
    logger.error(
      `[COMMANDE] Erreur r√©cup√©ration toutes les commandes : ${error.message}`
    );
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üìå Obtenir une commande par ID
export const getCommandeById = async (req, res) => {
  try {
    const commande = await Commande.findById(req.params.id).populate(
      "magasinier",
      "nom prenom email"
    );
    if (!commande) {
      logger.warn(`[COMMANDE] Commande non trouv√©e : ${req.params.id}`);
      return res.status(404).json({ message: "Commande non trouv√©e" });
    }
    logger.info(`[COMMANDE] Commande r√©cup√©r√©e : ${req.params.id}`);
    res.status(200).json(commande);
  } catch (error) {
    logger.error(`[COMMANDE] Erreur r√©cup√©ration commande : ${error.message}`);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üìå Cr√©er une commande
export const createCommande = async (req, res) => {
  try {
    const { magasinier, fournisseur, statut } = req.body;

    const existingMagasigner = await Utilisateur.findById(magasinier);
    if (!existingMagasigner) {
      logger.warn(`[COMMANDE] magasinier non trouv√© : ID ${magasinier}`);
      return res.status(404).json({ message: "magasinier non trouv√©" });
    }

    if (!magasinier || !fournisseur) {
      logger.warn("[COMMANDE] Champs requis manquants lors de la cr√©ation");
      return res.status(400).json({ message: "Tous les champs sont requis" });
    }

    const nouvelleCommande = new Commande({
      magasinier,
      fournisseur,
      statut,
    });

    await nouvelleCommande.save();
    logger.info(`[COMMANDE] Nouvelle commande cr√©√©e par ${magasinier}`);
    res
      .status(201)
      .json({
        message: "Commande cr√©√©e avec succ√®s",
        commande: nouvelleCommande,
      });
  } catch (error) {
    logger.error(`[COMMANDE] Erreur cr√©ation commande : ${error.message}`);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üìå Mettre √† jour une commande
export const updateCommande = async (req, res) => {
  try {
    const { magasinier, fournisseur, statut } = req.body;

    const existingMagasigner = await Utilisateur.findById(magasinier);
    if (!existingMagasigner) {
      logger.warn(`[COMMANDE] magasinier non trouv√© : ID ${magasinier}`);
      return res.status(404).json({ message: "magasinier non trouv√©" });
    }

    const commande = await Commande.findById(req.params.id);
    if (!commande) {
      logger.warn(
        `[COMMANDE] Commande √† mettre √† jour non trouv√©e : ${req.params.id}`
      );
      return res.status(404).json({ message: "Commande non trouv√©e" });
    }

    if (magasinier) commande.magasinier = magasinier;
    if (fournisseur) commande.fournisseur = fournisseur;
    if (statut) commande.statut = statut;

    await commande.save();
    logger.info(`[COMMANDE] Commande mise √† jour : ${req.params.id}`);
    res
      .status(200)
      .json({ message: "Commande mise √† jour avec succ√®s", commande });
  } catch (error) {
    logger.error(`[COMMANDE] Erreur mise √† jour commande : ${error.message}`);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

// üìå Supprimer une commande
export const deleteCommande = async (req, res) => {
  try {
    const commande = await Commande.findByIdAndDelete(req.params.id);
    if (!commande) {
      logger.warn(
        `[COMMANDE] Commande √† supprimer non trouv√©e : ${req.params.id}`
      );
      return res.status(404).json({ message: "Commande non trouv√©e" });
    }

    logger.info(`[COMMANDE] Commande supprim√©e : ${req.params.id}`);
    res.status(200).json({ message: "Commande supprim√©e avec succ√®s" });
  } catch (error) {
    logger.error(`[COMMANDE] Erreur suppression commande : ${error.message}`);
    res.status(500).json({ message: "Erreur serveur", error });
  }
};

export const validerCommande = async (req, res) => {
  try {
    const idCommande = req.params.idCommande;

    const commande = await Commande.findById(idCommande);
    if (!commande) {
      logger.warn(`[COMMANDE] Commande non trouv√©e : ${idCommande}`);
      return res.status(404).json({ message: "Commande non trouv√©e." });
    }

    commande.statut = "Valid√©e";
    await commande.save();

    logger.info(`[COMMANDE] Commande valid√©e : ${idCommande}`);
    res
      .status(200)
      .json({ message: "Commande valid√©e avec succ√®s.", commande });
  } catch (error) {
    logger.error(`[COMMANDE] Erreur validation commande : ${error.message}`);
    res
      .status(500)
      .json({
        message: "Erreur serveur lors de la validation de la commande.",
        error,
      });
  }
};

// üìå V√©rifier la r√©ception des pi√®ces livr√©es
export const verifierReceptionPieces = async (req, res) => {
  try {
    const idCommande = req.params.idCommande;

    const commande = await Commande.findById(idCommande);
    if (!commande) {
      logger.warn(`[COMMANDE] Commande non trouv√©e : ${idCommande}`);
      return res.status(404).json({ message: "Commande non trouv√©e." });
    }

    // Mettre √† jour le statut de la commande √† "Livr√©e"
    commande.statut = "Livr√©e";
    commande.receptionVerifiee = true;
    await commande.save();

    logger.info(
      `[COMMANDE] R√©ception v√©rifi√©e pour la commande : ${idCommande}`
    );
    res
      .status(200)
      .json({
        message: "R√©ception des pi√®ces v√©rifi√©e avec succ√®s.",
        commande,
      });
  } catch (error) {
    logger.error(`[COMMANDE] Erreur v√©rification r√©ception : ${error.message}`);
    res
      .status(500)
      .json({
        message: "Erreur serveur lors de la v√©rification de la r√©ception.",
        error,
      });
  }
};
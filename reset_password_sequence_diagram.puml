@startuml Reset Password Sequence Diagram

' Définition des acteurs et composants
actor User as user
participant "Vue (Frontend)" as view
participant "Contrôleur (AuthController)" as controller
participant "Modèle (Utilisateur)" as model
participant "Modèle (Token)" as tokenModel
participant "Service Email" as emailService

' Définition des couleurs
skinparam sequence {
    ActorBorderColor Gray
    ActorBackgroundColor WhiteSmoke
    ParticipantBorderColor Gray
    ParticipantBackgroundColor WhiteSmoke
    ArrowColor Gray
    LifeLineBorderColor Gray
}

' Style des participants
skinparam participant {
    BackgroundColor<<view>> LightGreen
    BackgroundColor<<controller>> LightBlue
    BackgroundColor<<model>> LightPink
    BackgroundColor<<service>> LightYellow
}

' Assignation des stéréotypes
participant view <<view>>
participant controller <<controller>>
participant model <<model>>
participant tokenModel <<model>>
participant emailService <<service>>

title Diagramme de Séquence - Réinitialisation de Mot de Passe

' === Demande de réinitialisation de mot de passe (forgotPassword) ===
group Demande de réinitialisation (forgotPassword)
    user -> view: 1. Accéder à la page de mot de passe oublié
    view --> user: 2. Afficher page de mot de passe oublié
    
    group loop [tant que les champs ne sont pas remplis correctement]
        user -> view: 3. Saisir l'adresse email
        view -> view: 4. Vérifier le remplissage du champ
    end
    
    view -> controller: 5. Envoyer l'email\n(POST /auth/forgot-password)
    
    controller -> model: 6. Vérifier si l'email existe\n(Utilisateur.findOne({ email }))
    
    alt [si l'utilisateur existe]
        model --> controller: 7. Retourner utilisateur trouvé
        
        controller -> controller: 8. Générer token de réinitialisation\n(crypto.randomBytes(32).toString("hex"))
        controller -> controller: 9. Hasher le token\n(bcrypt.hash(resetToken, 10))
        
        controller -> tokenModel: 10. Créer nouveau token\n(new Token({ userId, token, createdAt }))
        controller -> tokenModel: 11. Sauvegarder le token\n(token.save())
        tokenModel --> controller: 12. Confirmer sauvegarde
        
        controller -> controller: 13. Générer lien de réinitialisation
        controller -> emailService: 14. Envoyer email avec lien\n(sendEmail(email, sujet, contenu))
        emailService --> controller: 15. Confirmer envoi email
        
        controller --> view: 16. Succès 200: "Email de réinitialisation envoyé"
        view --> user: 17. Afficher message de confirmation
    else [si l'utilisateur n'existe pas]
        model --> controller: 7. Retourner null
        controller --> view: 8. Erreur 404: "Utilisateur non trouvé"
        view --> user: 9. Afficher message d'erreur
    end
end

' === Réinitialisation du mot de passe (resetPassword) ===
group Réinitialisation du mot de passe (resetPassword)
    user -> view: 1. Cliquer sur le lien dans l'email
    view --> user: 2. Afficher page de réinitialisation
    
    group loop [tant que les champs ne sont pas remplis correctement]
        user -> view: 3. Saisir nouveau mot de passe
        view -> view: 4. Vérifier le remplissage et la force du mot de passe
    end
    
    view -> controller: 5. Envoyer token et nouveau mot de passe\n(POST /auth/reset-password)
    
    controller -> tokenModel: 6. Récupérer tous les tokens\n(Token.find())
    tokenModel --> controller: 7. Retourner liste de tokens
    
    controller -> controller: 8. Vérifier validité du token\n(bcrypt.compare pour chaque token)
    
    alt [si token valide]
        controller -> model: 9. Récupérer l'utilisateur\n(Utilisateur.findById(userToken.userId))
        
        alt [si utilisateur trouvé]
            model --> controller: 10. Retourner utilisateur
            
            controller -> controller: 11. Générer salt\n(bcrypt.genSalt(10))
            controller -> controller: 12. Hasher le nouveau mot de passe\n(bcrypt.hash(password, salt))
            
            controller -> model: 13. Mettre à jour le mot de passe
            controller -> model: 14. Sauvegarder l'utilisateur\n(utilisateur.save())
            model --> controller: 15. Confirmer sauvegarde
            
            controller -> tokenModel: 16. Supprimer le token utilisé\n(userToken.deleteOne())
            tokenModel --> controller: 17. Confirmer suppression
            
            controller --> view: 18. Succès 200: "Mot de passe réinitialisé avec succès"
            view --> user: 19. Afficher confirmation et rediriger vers login
        else [si utilisateur non trouvé]
            model --> controller: 10. Retourner null
            controller --> view: 11. Erreur 404: "Utilisateur non trouvé"
            view --> user: 12. Afficher message d'erreur
        end
    else [si token invalide ou expiré]
        controller --> view: 9. Erreur 400: "Token invalide ou expiré"
        view --> user: 10. Afficher message d'erreur
    end
end

@enduml
